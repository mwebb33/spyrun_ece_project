#!/usr/bin/env nodejs
var app = require('../app');
var debug = require('debug')('test');
var server = require('http').createServer(app);
var io = require('socket.io').listen(server);  //pass a http.Server instance
var fs = require('fs');
var levelsJSON;
fs.readFile('./public/bin/levelsJSON.json', 'utf8', initCameras);
console.log("socket.io started")

server.listen(app.get('port'));

var obj = new Object();
var charState; 
var cameraClock; 

var sockets = {};
var serverClients = {};
var connectionIDCounter = 0;
var curVal = 3/2 * Math.PI;
var curVal2 = 0;
var curValue = 0;
var reverse = false;
var reverse2 = false;
var reverse3 = false;

cameraRotArray = [];
cameraObjArray = [];
cameraRotArrayString = [];
camerasInitPosition();
nIntervId = setInterval(camerasRotate, 33);
nIntervIdProp = setInterval(propigate, 33);

/* Get the camera's information */


app.get('/', function (req, res) {
  res.sendfile(__dirname + '/index.html');
});

io.on('connection', function (socket) {

  socket.id = connectionIDCounter++;
  sockets[socket.id] = socket;
  serverClients[socket.id] = socket.id;
  console.log("socket.io client connected ID: " + socket.id);

  //send new client to other clients
  alertJoin(socket.id);

  socket.on('client', function (data) {
    var clientMsg = JSON.parse(data);
    obj[socket.id] = data;
    obj.cameras = cameraRotArrayString;
    charState = JSON.stringify(obj);
    //send new state to clients
  });

  socket.on('init', function (data) {
    var clientMsg = data;
    clientMsg.id = socket.id; 
    clientMsg.clients = serverClients; 
    console.log("replying to ID with: " + socket.id); 
    rspMsg = JSON.stringify(clientMsg);

    //send response message
    socket.emit('ack', rspMsg);
  });

  socket.on('disconnect', function (data) {
    console.log("Socket.io connection closed ID: " + socket.id);
    delete serverClients[socket.id];
    clearInterval(socket.id);
    delete sockets[socket.id];
    delete obj[socket.id];
    charState = JSON.stringify(obj);

    //send drop message to remaining clients
    alertDrop(socket.id);
  });
});

function initCameras(err, data) {

  if (err) throw err;
  levelsJSON = JSON.parse(data);
  /* Go through the cameras for every level */
  var index = 0;
  for(var i = 0; i < levelsJSON.Cameras.length; i++) {
    for(var n = 0; n < levelsJSON.Cameras[i].startRotation.length; n++) {
      cameraRotArray[index] = levelsJSON.Cameras[i].startRotation[n];
      cameraObjArray[index] = new Object();
      cameraObjArray[index].reverse = levelsJSON.Cameras[i].reverse;

      /* Get the starting position */
      switch(levelsJSON.Cameras[i].startRotation[n]) {
        case 0:
          cameraObjArray[index].start = 0;
          break;
        case 1:
          cameraObjArray[index].start = Math.PI/2;
          break;
        case 2:
          cameraObjArray[index].start = Math.PI;
          break;
        case 3:
          cameraObjArray[index].start = (3*Math.PI)/2;
          break;
        case 4:
          cameraObjArray[index].start = 2*Math.PI;
          break;
      }

      /* Get the ending position */
      switch(levelsJSON.Cameras[i].endRotation[n]) {
        case 0:
          cameraObjArray[index].end = 0;
          break;
        case 1:
          cameraObjArray[index].end = Math.PI/2;
          break;
        case 2:
          cameraObjArray[index].end = Math.PI;
          break;
        case 3:
          cameraObjArray[index].end = (3*Math.PI)/2;
          break;
        case 4:
          cameraObjArray[index].end = 2*Math.PI;
          break;
      }
      cameraObjArray[index].sweep = levelsJSON.Cameras[i].sweep[n];
      cameraObjArray[index].currVal = 0;
      cameraRotArrayString[index] = cameraRotArray[index].toString();
      index++;
    }
  }
};

function camerasRotate() {
  var tick;
  //console.log(cameraObjArray);
  for(var i = 0; i < cameraObjArray.length; i++) {
    if(cameraObjArray[i].reverse) {
      tick = -0.0104719*2.8;
    }
    else {
      tick =  0.0104719*2.8;
    }
    cameraObjArray[i].currVal += tick;
    cameraRotArray[i] = cameraObjArray[i].start - cameraObjArray[i].currVal;
    cameraRotArrayString[i] = cameraRotArray[i].toFixed(2).toString();

    /* Reverse the direction if we've reached the end */
    if(cameraObjArray[i].sweep) {
      if(cameraObjArray[i].currVal > Math.PI)
        cameraObjArray[i].reverse = true;
      else if(cameraObjArray[i].currVal < 0)
        cameraObjArray[i].reverse = false;
    }
  }
};

function camerasInitPosition() {
  for(var x = 0; x < 10; x++) {
    cameraRotArray[x] = 3/2 * Math.PI;
    cameraRotArrayString[x] = cameraRotArray[x].toString();
  }
}

function propigate() {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('state', charState);
    }
  }
}

function alertDrop(ID) {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('playerleft', { id: ID });
    }
  }
}

function alertJoin(ID) {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('playerjoin', { id: ID });
    }
  }
}

