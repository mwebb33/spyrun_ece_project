#!/usr/bin/env nodejs
var app = require('../app');
var debug = require('debug')('test');
var server = require('http').createServer(app);
var io = require('socket.io').listen(server);  //pass a http.Server instance
console.log("socket.io started")

server.listen(app.get('port'));

var obj = new Object();
var charState; 
var cameraClock; 

var sockets = {};
var serverClients = {};
var connectionIDCounter = 0;
var curVal = 3/2 * Math.PI;
var curVal2 = 0;
var curValue = 0;
var reverse = false;
var reverse2 = false;
var reverse3 = false;

cameraRotArray = [];
cameraRotArrayString = [];
camerasInitPosition();
nIntervId = setInterval(camerasRotate, 33);
nIntervIdProp = setInterval(propigate, 33);

app.get('/', function (req, res) {
  res.sendfile(__dirname + '/index.html');
});

io.on('connection', function (socket) {
  socket.id = connectionIDCounter++;
  sockets[socket.id] = socket;
  serverClients[socket.id] = socket.id;
  console.log("socket.io client connected ID: " + socket.id);

  //send new client to other clients
  alertJoin(socket.id);

  socket.on('client', function (data) {
    var clientMsg = JSON.parse(data);
    obj[socket.id] = data;
    obj.cameras = cameraRotArrayString;
    charState = JSON.stringify(obj);
    //send new state to clients
  });

  socket.on('init', function (data) {
    var clientMsg = data;
    clientMsg.id = socket.id; 
    clientMsg.clients = serverClients; 
    console.log("replying to ID with: " + socket.id); 
    rspMsg = JSON.stringify(clientMsg);

    //send response message
    socket.emit('ack', rspMsg);
  });

  socket.on('disconnect', function (data) {
    console.log("Socket.io connection closed ID: " + socket.id);
    delete serverClients[socket.id];
    clearInterval(socket.id);
    delete sockets[socket.id];
    delete obj[socket.id];
    charState = JSON.stringify(obj);

    //send drop message to remaining clients
    alertDrop(socket.id);
  });
});
 
function camerasRotate() {
  for(var x = 0; x < 2; x++) {
    if(reverse == false){
      if(curVal < Math.PI){
        curVal += 0.0104719*1.2;
        cameraRotArray[x] = curVal - Math.PI/2 - .1;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } else {
        reverse = true; 
        curVal = 0;
        cameraRotArray[x] = 1/2 * Math.PI;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    } else {
      if(curVal < Math.PI){
        curVal += 0.0104719*1.2;
        cameraRotArray[x] = Math.PI/2 - .1 - curVal ;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } else {
        reverse = false; 
        curVal = 0;
        cameraRotArray[x] = 3/2 * Math.PI;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    }
    //console.log("hello");
  }
  //console.log("hello");
  var x = 2;
    if(reverse2 == false){
      if(curValue < Math.PI){
        curValue += 0.0104719*2.5;
        cameraRotArray[x] = Math.PI - .1 - curValue;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } 
      else {
        reverse2 = true; 
        curValue = Math.PI;
        cameraRotArray[x] = 0;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    } 
    else {
      //console.log("hello");
      if(curValue > 0){
        curValue -= 0.0104719*2.5;
        cameraRotArray[x] = Math.PI - .1 - curValue;
        //cameraRotArray[x] = curValue - Math.PI - .1;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } 
      else {
        //console.log("hello");
        reverse2 = false; 
        curValue = 0;
        cameraRotArray[x] = Math.PI;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    }

    var x = 3;
    if(reverse3 == false){
      if(curVal2 < Math.PI){
        curVal2 += 0.0104719*2.5;
        //cameraRotArray[x] = Math.PI - .1 - curVal2 ;
        cameraRotArray[x] = curVal2 - Math.PI - .1;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } 
      else {
        reverse3 = true; 
        curVal2 = Math.PI;
        cameraRotArray[x] = 0;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    } 
    else {
      if(curVal2 > 0){
        curVal2 -= 0.0104719*2.5;
        cameraRotArray[x] = curVal2 - Math.PI - .1;
        //cameraRotArray[x] = Math.PI - .1 - curVal2 ;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      } 
      else {
        reverse3 = false; 
        curVal2 = 0;
        cameraRotArray[x] = Math.PI;
        cameraRotArrayString[x] = cameraRotArray[x].toFixed(2).toString();
      }
    }
}

function camerasInitPosition() {
  for(var x = 0; x < 10; x++) {
    cameraRotArray[x] = 3/2 * Math.PI;
    cameraRotArrayString[x] = cameraRotArray[x].toString();
  }
}

function propigate() {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('state', charState);
    }
  }
}

function alertDrop(ID) {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('playerleft', { id: ID });
    }
  }
}

function alertJoin(ID) {
  //console.log("hi");
  for (var index = 0; index < connectionIDCounter; index++){
    if(sockets[index] != undefined){
      sockets[index].emit('playerjoin', { id: ID });
    }
  }
}

